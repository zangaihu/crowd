<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sh.mapper.AuthMapper">
  <resultMap id="BaseResultMap" type="com.sh.entity.Auth">
    <!--@mbg.generated-->
    <!--@Table t_auth-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="category_id" jdbcType="INTEGER" property="categoryId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, `name`, title, category_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from t_auth
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from t_auth
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.sh.entity.Auth" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into t_auth (`name`, title, category_id
      )
    values (#{name,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, #{categoryId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.sh.entity.Auth" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into t_auth
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        `name`,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="categoryId != null">
        category_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sh.entity.Auth">
    <!--@mbg.generated-->
    update t_auth
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sh.entity.Auth">
    <!--@mbg.generated-->
    update t_auth
    set `name` = #{name,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      category_id = #{categoryId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="getAllAuth" resultMap="BaseResultMap">
      select <include refid="Base_Column_List"/>
      from t_auth

    </select>
  <select id="getAssignedAuthIdByRoleId" resultType="java.lang.Integer">

    select auth_id from inner_role_auth
    where role_id=#{roleId}

  </select>
  <delete id="deleteOldRoleAuthRelation">
    delete from inner_role_auth
    where role_id=#{roleId}
  </delete>
    <insert id="saveRoleAuthRelation">
        insert into inner_role_auth (role_id, auth_id)
        values
        <foreach collection="authIdArray" item="authId" separator=",">
            (#{roleId},#{authId})
        </foreach>
    </insert>
<!--  <select id="" resultType="java.lang.String">-->

<!--&lt;!&ndash;    select name&ndash;&gt;-->
<!--&lt;!&ndash;    from t_auth&ndash;&gt;-->
<!--&lt;!&ndash;    where id in&ndash;&gt;-->
<!--&lt;!&ndash;    ( select auth_id from inner_role_auth where role_id in&ndash;&gt;-->
<!--&lt;!&ndash;    (select role_id from inner_admin_role where admin_id=#{adminId}&ndash;&gt;-->

<!--&lt;!&ndash;    )&ndash;&gt;-->
<!--&lt;!&ndash;    )&ndash;&gt;-->
<!--&lt;!&ndash;    AND name!=""&ndash;&gt;-->


<!--    select a.name-->
<!--    from t_auth a-->
<!--    left join inner_role_auth ra on ra.auth_id=a.id-->
<!--    left join inner_admin_role ar on ar.role_id=ra.id-->
<!--    where ar.id=#{adminId}-->

<!--  </select>-->

  <select id="getAssignedAuthNameByAdminId" resultType="string">
    SELECT DISTINCT t_auth.name
    FROM t_auth
    LEFT JOIN inner_role_auth ON t_auth.id=inner_role_auth.auth_id
    LEFT JOIN inner_admin_role ON inner_admin_role.role_id=inner_role_auth.role_id
    WHERE inner_admin_role.admin_id=#{adminId} and t_auth.name != "" and t_auth.name is not null
  </select>
</mapper>